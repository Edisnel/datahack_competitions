View(numeric_train)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
control <- trainControl(method = "cv", number = 5)
#number of hidden neurons http://stats.stackexchange.com/questions/181/how-to-choose-the-number-of-hidden-layers-and-nodes-in-a-feedforward-neural-netw
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5,5))
normalvalue <- max(numeric_train$Item_Outlet_Sales) - min(numeric_train$Item_Outlet_Sales)
nnet_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "nnet", maxit = 500, tuneGrid = my.grid, trace = T)
print(nnet_model)
nnet.predict <- predict(nnet_model)*normalvalue
library(plyr)
library(xlsx)
library(ggplot2)
library(Metrics)
library(dplyr)
train <- read.csv("train_modified.csv")
test <- read.csv("test_modified.csv")
columns.train <- c("Item_Weight","Item_Fat_Content","Item_Visibility","Item_MRP","Outlet_Size","Outlet_Location_Type","Outlet_Type","Outlet_Years","Item_Outlet_Sales")
columns.test <- c("Item_Weight","Item_Fat_Content","Item_Visibility","Item_MRP","Outlet_Size","Outlet_Location_Type","Outlet_Type","Outlet_Years")
final_train <- subset(train, select = columns.train)
final_test <- subset(test, select = columns.test)
rownames(final_train) <- NULL
rownames(final_test) <- NULL
library(dummies)
library(nnet)
library(dummies)
library(nnet)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
View(numeric_train)
control <- trainControl(method = "cv", number = 5)
#number of hidden neurons http://stats.stackexchange.com/questions/181/how-to-choose-the-number-of-hidden-layers-and-nodes-in-a-feedforward-neural-netw
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5,5))
normalvalue <- max(numeric_train$Item_Outlet_Sales) - min(numeric_train$Item_Outlet_Sales)
#linout is the activation function
nnet_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "nnet", maxit = 500, tuneGrid = my.grid, trace = T)
print(nnet_model)
nnet.predict <- predict(nnet_model)*normalvalue
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry =  = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
print(forest_model)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
print(forest_model)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
View(numeric_train)
Item_Outlet_Sales ~
numeric_train <- numeric_train[,columns.train]
View(numeric_train)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
print(forest_model)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
View(numeric_train)
View(final_train)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
View(numeric_train)
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
varImpPlot(forest_model)
varImpPlot(forest_model)
varImpPlot(forest_model)
varImpPlot(forest_model)
mycontrol <- trainControl(method = "cv", number = 5)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE, control = mycontrol)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
print(forest_model)
sqrt(1176045)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE, control = mycontrol, importance = TRUE)
print(forest_model)
mycontrol <- trainControl(method = "cv", number = 5)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 8, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE, control = mycontrol, importance = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE, control = mycontrol, importance = TRUE)
print(forest_model)
library(randomForest)
library(foreach)
library(dummies)
library(nnet)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
mycontrol <- trainControl(method = "cv", number = 5)
#rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, prox = TRUE, allowParallel = TRUE)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE, control = mycontrol, importance = TRUE)
mycontrol <- trainControl(method = "cv", number = 6)
#rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, prox = TRUE, allowParallel = TRUE)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 5, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
‘??corr.bias’
'corr.bias’
??corr.bias
mycontrol <- trainControl(method = "cv", number = 6)
#rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, prox = TRUE, allowParallel = TRUE)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 5, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 150)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 5, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 80)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 80)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 6, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 80)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
??maxnodes
View(numeric_train)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 6, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 200, corr.bias = TRUE)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 6, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 6, ntree = 300, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 6, ntree = 350, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 6, ntree = 600, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
mycontrol <- trainControl(method = "cv", number = 4)
forest_model <- randomForest(Item_Outlet_Sales ~ ., data = numeric_train, control = mycontrol, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(forest_model)
pred <- predict(forest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
mycontrol <- trainControl(method = "cv", number = 5)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, mtry = 4, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(rforest_model)
mycontrol <- trainControl(method = "cv", number = 5, .nodesize(100,200))
mycontrol <- trainControl(method = "cv", number = 5, seeds = sample.int(1000, 22))
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
print(rforest_model)
pred <- predict(rforest_model, type = "response")
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model)
rmse(numeric_train$Item_Outlet_Sales, pred)
numeric_train$prediction <- pred
View(numeric_train)
pred <- predict(rforest_model)
print(rforest_model)
pred <- predict(rforest_model)
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model, type = "response")
pred <- predict(rforest_model, type = "raw")
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(forest_model,final_test)
pred <- predict(forest_model,numeric_test)
WriteResults("sol_Forestmodel.csv", pred)
WriteResults <- function(file, pred)
{
base = test[,c("Item_Identifier","Outlet_Identifier")]
base$Item_Outlet_Sales <- round(pred,4)
rownames(base) <- NULL
write.table(base, file, sep = ",", row.names = FALSE, quote = FALSE)
}
pred <- predict(rforest_model,numeric_test)
pred <- predict(rforest_model, type = "raw")
numeric_train$prediction <- pred
pred
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model,numeric_test)
WriteResults("sol_Forestmodel.csv", pred)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, maxnodes = 100, corr.bias = TRUE)
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500, importance = TRUE, replace = TRUE, nodesize = 100, corr.bias = TRUE)
print(rforest_model)
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
View(numeric_train)
sample.int(1000, 22)
getModelInfo(rforest_model)
cartGrid <- expand.grid(.nodesize=(90,150))
cartGrid <- expand.grid(.cp=(1:50)*0.01)
cartGrid <- expand.grid(.nodesize=(90:150))
cartGrid
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
cartGrid <- expand.grid(.nodesize=(90:150), .ntree(500:600))
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.mtry=5,.nodesize=(90:150), .ntree(500:600))
cartGrid <- expand.grid(.mtry=(4:5),.nodesize=(90:150), .ntree(500:600))
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.nodesize=(90:150), .ntree(500:600), .mtry=5)
cartGrid <- expand.grid(.nodesize=(90:150), .mtry=5)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500,importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500,importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.nodesize=(90:150), .mtry=(5:6))
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500,importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.nodesize=(90:150), mtry=(5:6))
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500,importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500,importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
View(train)
View(numeric_train)
WriteResults <- function(file, pred)
{
base = test[,c("Item_Identifier","Outlet_Identifier")]
base$Item_Outlet_Sales <- round(pred,4)
rownames(base) <- NULL
write.table(base, file, sep = ",", row.names = FALSE, quote = FALSE)
}
library(plyr)
library(xlsx)
library(ggplot2)
library(Metrics)
library(dplyr)
library(rpart)
library(e1071)
library(rpart.plot)
library(caret)
setwd("E:/DataScience/Documentacion/Competitions/Big Mart Sales")
train <- read.csv("Train.csv")
train$source <- c("train")
test <- read.csv("Test.csv")
test$Item_Outlet_Sales <- NA
test$source <- c("test")
data <- rbind(train,test)
data1<-data
# -------------impute Item_Weight by the average weight of the particular item----------
df.Weight <- data.frame(Item_Identifier = data1$Item_Identifier,  Item_Weight = data1$Item_Weight)
Mean_Weight <- ddply(df.Weight, "Item_Identifier", summarise, mean_weight = round(mean(Item_Weight, na.rm = TRUE),4))
Idx_NA_Weight <- which(is.na(data1$Item_Weight))
Identifiers <- data1$Item_Identifier[Idx_NA_Weight]
data1$Item_Weight[Idx_NA_Weight] <- Mean_Weight$mean_weight[match(Identifiers,Mean_Weight$Item_Identifier)]
# -------------impute Outlet_Size by the mode of the particular Outlet_Type--------------
df.OuletSize <- data.frame(Outlet_Type = data1$Outlet_Type,  Outlet_Size = data1$Outlet_Size)
df.Outlet_Mode <- ddply(df.OuletSize, "Outlet_Type", summarise, outlet_mode = Mode(Outlet_Size,na.rm = TRUE))
Idx_NA_OutLetSize <- which(data1$Outlet_Size == "")
df.NA_OuletSize <- df.OuletSize[which(df.OuletSize$Outlet_Size == ""),]
# fill empty rows in Outlet_Size with the mode.
data1$Outlet_Size[Idx_NA_OutLetSize] <- sapply(df.NA_OuletSize$Outlet_Type, function(x) ModeByOutletType(x))
# --------minimum value here is 0, it has no sense...impute it with mean visibility of that product---
summary(data1$Item_Visibility)
df.visibility <- data.frame(Item_Identifier = data1$Item_Identifier,  Item_Visibility= data1$Item_Visibility)
#Mean visibility by Item_Identifier
Mean_Visibility <- ddply(df.visibility, "Item_Identifier", summarise, mean_visibility = round(mean(Item_Visibility),4))
#Replacing each null value of Item_Visibility by mean value corresponding to Item_Identifier
Idx_zero_visibility <- which(data1$Item_Visibility == 0)
Identifiers <- data1$Item_Identifier[Idx_zero_visibility]
data1$Item_Visibility[Idx_zero_visibility] <- sapply(Identifiers,function(x) fMean_Visibility(x))
# -----------New column with the years of operation of a store ----------
data1$Outlet_Years = 2013 - data1$Outlet_Establishment_Year
# --------------Modify categories of Item_Fat_Content--------------
levels(data1$Item_Fat_Content)[levels(data1$Item_Fat_Content)=="low fat"] <- "Low Fat"
levels(data1$Item_Fat_Content)[levels(data1$Item_Fat_Content)=="LF"] <- "Low Fat"
levels(data1$Item_Fat_Content)[levels(data1$Item_Fat_Content)=="reg"] <- "Regular"
# ------------------------New Item Type ---------------------------------
q <- substr(data1$Item_Identifier,1,2)
q <- gsub("FD","Food",q)
q <- gsub("DR","Drinks",q)
q <- gsub("NC","Non-Consumable",q)
table(q)
data1$Item_Type_New <- q # remember this variable for model building
train <- subset(data1, data1$source == "train")
test <- subset(data1, data1$source == "test")
columns.train <- c("Item_Weight","Item_Fat_Content","Item_Visibility","Item_MRP","Outlet_Size","Outlet_Location_Type","Outlet_Type","Outlet_Years","Item_Outlet_Sales")
columns.test <- c("Item_Weight","Item_Fat_Content","Item_Visibility","Item_MRP","Outlet_Size","Outlet_Location_Type","Outlet_Type","Outlet_Years")
final_train <- subset(train, select = columns.train)
final_test <- subset(test, select = columns.test)
rownames(final_train) <- NULL
rownames(final_test) <- NULL
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500,importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
#cartGrid <- expand.grid(.nodesize=(90:150), mtry=(5:6))
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, corr.bias = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
cartGrid <- expand.grid(.nodesize=(90:150), mtry=5)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = 100,  importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = 100,  importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.nodesize=(90:150), mtry=(5,6))
cartGrid <- expand.grid(.nodesize=(90:150), mtry=(5:6))
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = 100,  importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = 100,  importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid
cartGrid <- expand.grid(.nodesize=(90:150), .mtry=(5:6))
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = 100,  importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.nodesize=(90:150), .mtry=(5:6))
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = .nodesize,  mtry= .mtry, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = .nodesize,  mtry= .mtry, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
cartGrid <- expand.grid(.nodesize=(90:150), mtry="5")
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, tuneGrid = cartGrid, ntree = 500, nodesize = .nodesize,  mtry= .mtry, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = control, ntree = 500, nodesize = 100,  mtry = 5, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100,  mtry = 5, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE)
print(rforest_model)
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
#cartGrid <- expand.grid(.nodesize=(90:150), mtry="5")
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE, corr.bias = TRUE)
print(rforest_model)
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
View(numeric_train)
mse(numeric_train$Item_Outlet_Sales, pred)
rforest_model$modelInfo
rforest_model$results
rforest_model$modelType
rforest_model$pred
rforest_model$bestTune
rforest_model$results
pred <- predict(rforest_model)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model,numeric_test)
WriteResults("sol_Forestmodel.csv", pred)
pred <- predict(rforest_model,numeric_test)
View(numeric_test)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
View(numeric_test)
WriteResults <- function(file, pred)
{
base = test[,c("Item_Identifier","Outlet_Identifier")]
base$Item_Outlet_Sales <- round(pred,4)
rownames(base) <- NULL
write.table(base, file, sep = ",", row.names = FALSE, quote = FALSE)
}
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
pred <- predict(rforest_model)
pred <- predict(rforest_model,numeric_test)
numeric_train$prediction <- pred
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model,numeric_test)
rmse(numeric_train$Item_Outlet_Sales, pred)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE, corr.bias = TRUE)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE, corr.bias = TRUE)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE, corr.bias = TRUE)
print(rforest_model)
pred <- predict(rforest_model)
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model, type = "prob")
pred <- predict(rforest_model, type = "response")
pred <- predict(rforest_model, type = "raw")
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model)
rmse(numeric_train$Item_Outlet_Sales, pred)
rforest_model$coefnames
rforest_model$control
rforest_model$maximize
rforest_model$pred
rforest_model$dots
pred <- predict(rforest_model)
rmse(numeric_train$Item_Outlet_Sales, pred)
pred <- predict(rforest_model,numeric_test)
numeric_train$prediction <- pred
View(numeric_train)
View(numeric_test)
numeric_train <- numeric_train[,columns.train]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
pred <- predict(rforest_model,numeric_test)
columns.dum <- c('Outlet_Size','Outlet_Location_Type','Outlet_Type', 'Item_Type_New','Item_Fat_Content')
numeric_train <- dummy.data.frame(final_train, names = columns.dum, sep='_')
numeric_test <- dummy.data.frame(final_test, names = columns.dum, sep='_')
columns.train <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years','Item_Outlet_Sales')
columns.test <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier 1','Outlet_Type_Supermarket Type1','Outlet_Years')
numeric_train <- numeric_train[,columns.train]
numeric_test <- numeric_test[,columns.test]
colnames(numeric_train) <- c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years','Item_Outlet_Sales')
colnames(numeric_test) <-  c('Item_Weight', 'Item_Visibility','Item_MRP','Outlet_Size_High','Outlet_Size_Medium','Outlet_Location_Type_Tier1','Outlet_Type_SupermarketType1','Outlet_Years')
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
#cartGrid <- expand.grid(.nodesize=(90:150), mtry="5")
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE, corr.bias = TRUE)
print(rforest_model)
pred <- predict(rforest_model)
rmse(numeric_train$Item_Outlet_Sales, pred)
seeds <- vector(mode = "list", length = 50)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
mycontrol <- trainControl(method = "cv", number = 5, seeds = seeds)
rforest_model <- train(Item_Outlet_Sales ~ ., data = numeric_train, method = "parRF", trControl = mycontrol, ntree = 500, nodesize = 100, importance = TRUE, replace = TRUE, metric = "RMSE", maximize = FALSE, corr.bias = TRUE)
print(rforest_model)
